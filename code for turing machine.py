# -*- coding: utf-8 -*-
"""Tugas 4_Teori Komputasi_Kelompok 6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XnZR7VjF-Y4j8HHET3c_aEhgX96D-qyK
"""

# Didefinisikan mesin Turing yang dapat menerima bahasa {a^n b^n c^n}, n>=1
def MesinTuring_Klmpk6(state_awal = None, 
                       simbol_blank = None,
                       pemetaan = [],
                       tape = [],
                       halt_state = None,
                       pos = 0):
    st = state_awal
    if not tape: tape = [simbol_blank]
    if pos < 0: pos += len(tape)
    if pos >= len(tape) or pos < 0: raise Error("Nilai posisi awal salah")
    pemetaan = dict(((s0, v0), (v1, arah, s1)) for (s0, v0, v1, arah, s1) in pemetaan)
 
    while True:
        # untuk print hasil dari mesin Turing di setiap iterasinya
        print(st, '\t', end=" ")
        for i, v in enumerate(tape):
            if i == pos: print("[%s]" % (v,), end=" ")
            else: print(v, end=" ")
        print()
 
        if st == halt_state: 
            print('\nBahasa diterima.')
            break
        if (st, tape[pos]) not in pemetaan: break
 
        (v1, arah, s1) = pemetaan[(st, tape[pos])]
        tape[pos] = v1
        if arah == 'left':
            if pos > 0: pos -= 1
            else: tape.insert(0, simbol_blank)
        if arah == 'right':
            pos += 1
            if pos >= len(tape): tape.append(simbol_blank) 
        if arah == 'stay' :
            print('\nBahasa tidak diterima.')
            break
        st = s1

# Implementasi Mesin Turingnya
# Contoh tape = 'aabbcc'
MesinTuring_Klmpk6(state_awal = 'q0', 
                   halt_state = 'q5',
                   simbol_blank = '_',
                   tape = list('aabbcc'),
                   pemetaan = map(tuple, ["q0 a x right q1".split(), "q0 b b stay  q0".split(), "q0 c c stay  q0".split(),
                                          "q0 x x stay  q0".split(), "q0 y y right q4".split(), "q0 z z stay  q0".split(),
                                          "q0 _ _ stay  q0".split(), 
                                          "q1 a a right q1".split(), "q1 b y right q2".split(), "q1 c c stay  q1".split(),
                                          "q1 x x stay  q1".split(), "q1 y y right q1".split(), "q1 z z stay  q1".split(),
                                          "q1 _ _ stay  q1".split(), 
                                          "q2 a a stay  q2".split(), "q2 b b right q2".split(), "q2 c z left  q3".split(),
                                          "q2 x x stay  q2".split(), "q2 y y stay  q2".split(), "q2 z z right q2".split(),
                                          "q2 _ _ stay  q2".split(), 
                                          "q3 a a left  q3".split(), "q3 b b left  q3".split(), "q3 c c stay  q3".split(),
                                          "q3 x x right q0".split(), "q3 y y left  q3".split(), "q3 z z left  q3".split(),
                                          "q3 _ _ stay  q3".split(), 
                                          "q4 a a stay  q4".split(), "q4 b b stay  q4".split(), "q4 c c stay  q4".split(),
                                          "q4 x x stay  q4".split(), "q4 y y right q4".split(), "q4 z z right q4".split(),       
                                          "q4 _ _ left  q5".split()]
                                  )                
                   )